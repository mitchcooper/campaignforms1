import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { useLocation } from "wouter";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { Upload, FileText, Sparkles, Loader2, CheckCircle, AlertCircle } from "lucide-react";
import { Card } from "@/components/ui/card";

interface FormWizardDialogProps {
  open: boolean;
  onClose: () => void;
}

type WizardMode = "upload" | "describe";

export function FormWizardDialog({ open, onClose }: FormWizardDialogProps) {
  const [mode, setMode] = useState<WizardMode>("upload");
  const [file, setFile] = useState<File | null>(null);
  const [description, setDescription] = useState("");
  const [instructions, setInstructions] = useState("");
  const { toast } = useToast();
  const [, setLocation] = useLocation();

  const wizardMutation = useMutation({
    mutationFn: async (data: FormData | { description: string }) => {
      if (data instanceof FormData) {
        // PDF upload mode
        const response = await fetch("/api/forms/wizard", {
          method: "POST",
          body: data,
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Failed to generate template");
        }

        return response.json();
      } else {
        // Description mode
        return apiRequest("POST", "/api/forms/wizard", data);
      }
    },
    onSuccess: async (result) => {
      toast({
        title: "Template generated!",
        description: `AI has analyzed your form. Creating...`,
      });

      // Create form with generated template
      try {
        const formData = {
          title: file?.name.replace(".pdf", "") || "AI Generated Form",
          description: result.analysis || "Generated by AI Form Wizard",
          template: result.template,
          isActive: true,
        };

        const newForm = await apiRequest("POST", "/api/forms", formData);

        queryClient.invalidateQueries({ queryKey: ["/api/forms"] });
        queryClient.invalidateQueries({ queryKey: ["/api/stats"] });

        toast({
          title: "Form created successfully!",
          description: "Opening the form builder for you to review and edit.",
        });

        onClose();
        setLocation(`/forms/${newForm.id}/builder`);
      } catch (error: any) {
        toast({
          title: "Error creating form",
          description: error.message || "Failed to create form with generated template",
          variant: "destructive",
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: "Generation failed",
        description: error.message || "Failed to generate form template. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      if (selectedFile.type !== "application/pdf") {
        toast({
          title: "Invalid file type",
          description: "Please upload a PDF file",
          variant: "destructive",
        });
        return;
      }
      if (selectedFile.size > 10 * 1024 * 1024) {
        toast({
          title: "File too large",
          description: "Please upload a PDF file smaller than 10MB",
          variant: "destructive",
        });
        return;
      }
      setFile(selectedFile);
    }
  };

  const handleGenerate = () => {
    if (mode === "upload") {
      if (!file) {
        toast({
          title: "No file selected",
          description: "Please select a PDF file to upload",
          variant: "destructive",
        });
        return;
      }

      const formData = new FormData();
      formData.append("pdf", file);
      if (instructions.trim()) {
        formData.append("instructions", instructions);
      }

      wizardMutation.mutate(formData);
    } else {
      if (!description.trim()) {
        toast({
          title: "No description provided",
          description: "Please describe the form you want to create",
          variant: "destructive",
        });
        return;
      }

      wizardMutation.mutate({ description });
    }
  };

  const handleClose = () => {
    if (!wizardMutation.isPending) {
      setFile(null);
      setDescription("");
      setInstructions("");
      onClose();
    }
  };

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-[color:var(--hc-cyan)]" />
            AI Form Wizard
          </DialogTitle>
          <DialogDescription>
            Upload a PDF form or describe your form, and AI will generate a template for you.
          </DialogDescription>
        </DialogHeader>

        <Tabs value={mode} onValueChange={(v) => setMode(v as WizardMode)} className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="upload" className="flex items-center gap-2">
              <Upload className="h-4 w-4" />
              Upload PDF
            </TabsTrigger>
            <TabsTrigger value="describe" className="flex items-center gap-2">
              <FileText className="h-4 w-4" />
              Describe Form
            </TabsTrigger>
          </TabsList>

          <TabsContent value="upload" className="space-y-4 mt-4">
            <div className="space-y-2">
              <Label htmlFor="pdf-upload">PDF File</Label>
              <div className="flex items-center gap-4">
                <Input
                  id="pdf-upload"
                  type="file"
                  accept=".pdf"
                  onChange={handleFileChange}
                  disabled={wizardMutation.isPending}
                  className="flex-1"
                />
              </div>
              {file && (
                <Card className="p-3 bg-muted/50">
                  <div className="flex items-center gap-2 text-sm">
                    <FileText className="h-4 w-4 text-muted-foreground" />
                    <span className="font-medium">{file.name}</span>
                    <span className="text-muted-foreground">
                      ({(file.size / 1024).toFixed(1)} KB)
                    </span>
                  </div>
                </Card>
              )}
              <p className="text-sm text-muted-foreground">
                Upload a PDF form (max 10MB). AI will analyze the visual layout and generate a template.
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="instructions">Additional Instructions (Optional)</Label>
              <Textarea
                id="instructions"
                value={instructions}
                onChange={(e) => setInstructions(e.target.value)}
                placeholder="e.g., 'Make the vendor name field auto-fill from vendor.name'"
                disabled={wizardMutation.isPending}
                rows={3}
              />
              <p className="text-sm text-muted-foreground">
                Provide any specific instructions for the AI.
              </p>
            </div>
          </TabsContent>

          <TabsContent value="describe" className="space-y-4 mt-4">
            <div className="space-y-2">
              <Label htmlFor="description">Form Description</Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="e.g., 'Create a vendor authority form with fields for vendor name, email, property address, sale price, and a signature field. Pre-fill vendor and property data where possible.'"
                disabled={wizardMutation.isPending}
                rows={8}
                className="resize-none"
              />
              <p className="text-sm text-muted-foreground">
                Describe the form you want to create. Include field types and any pre-fill requirements.
              </p>
            </div>
          </TabsContent>
        </Tabs>

        {wizardMutation.isPending && (
          <Card className="p-4 bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800">
            <div className="flex items-center gap-3">
              <Loader2 className="h-5 w-5 animate-spin text-blue-600" />
              <div className="flex-1">
                <p className="font-medium text-blue-900 dark:text-blue-100">
                  Generating template...
                </p>
                <p className="text-sm text-blue-700 dark:text-blue-300">
                  {mode === "upload"
                    ? "AI is analyzing your PDF form visually..."
                    : "AI is creating your form template..."}
                </p>
              </div>
            </div>
          </Card>
        )}

        <div className="flex justify-end gap-3 pt-2">
          <Button
            type="button"
            variant="outline"
            onClick={handleClose}
            disabled={wizardMutation.isPending}
          >
            Cancel
          </Button>
          <Button
            onClick={handleGenerate}
            disabled={
              wizardMutation.isPending ||
              (mode === "upload" ? !file : !description.trim())
            }
            className="bg-[color:var(--hc-cyan)] text-white hover:opacity-90"
          >
            {wizardMutation.isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Sparkles className="mr-2 h-4 w-4" />
                Generate Template
              </>
            )}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
